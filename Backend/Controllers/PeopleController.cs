using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Linq;
using Backend.Models;
using System.Diagnostics;
using Backend.Logic.Recognition;
using Backend;

namespace bigbackend
{
    public class ValuesController : ApiController
	{
        [Route("api/login")]
        [HttpPost]
        public HttpResponseMessage GetPersonByLogin([FromBody] LoginData login)
		{
			Debug.WriteLine("Incoming POST for api/people : {0} | {1}", login.identifier, login.password);
			var user = Storage.FindPersonByCredentials(login.identifier, login.password);
            if (user != null)
            {
                return Request.CreateResponse(HttpStatusCode.OK, user);
            }
            else
            {
                return Request.CreateResponse(HttpStatusCode.NotFound);
            }

        }

		[Route("api/people")]
		[HttpPost]
		public HttpResponseMessage PostPerson(User newUser)
		{
			Debug.WriteLine("Incoming POST for api/people");
			if (ModelState.IsValid && newUser != null)
			{
				if (string.IsNullOrWhiteSpace(newUser.Email)
					|| string.IsNullOrWhiteSpace(newUser.Password)
					|| string.IsNullOrWhiteSpace(newUser.Name))	//pre-validating NOT NULL values
				{
					return Request.CreateResponse(HttpStatusCode.BadRequest);
				}
				Storage.AddUser(newUser);
				//var actualPerson = Person.PersonWithValidID(newPerson);
				//Storage.People.Add(actualPerson);

				/*foreach (Person p in Storage.People)
				{
					Console.WriteLine(p.Name + "  " + p.Bio + " " + p.Id.ToString());
				}*/

				/*var response = new HttpResponseMessage(HttpStatusCode.Created)
				{
					Content = new StringContent(newPerson.Name + " " + newPerson.Bio + " has been added to the server.")
				};
				response.Headers.Location =
					new Uri(Url.Link("DefaultApi", new { action = "status" }));
				return response;*/
				return Request.CreateResponse(HttpStatusCode.Created, newUser);	//Should in theory have the id generated by the db
			}
			else
			{
				return Request.CreateResponse(HttpStatusCode.BadRequest);
			}
		}

		[Route("api/people/{id}")]
        [HttpGet]
        public HttpResponseMessage GetUser(long id)
		{
			Debug.WriteLine("Incoming GET for api/people/id");
			var found = Storage.FindUserByID(id);
	        return found == null
		        ? Request.CreateErrorResponse(HttpStatusCode.NotFound, new HttpError("No person with that ID exists"))
		        : Request.CreateResponse(HttpStatusCode.OK, found);
        }

	    [Route("api/people")]
	    [HttpGet]
	    public HttpResponseMessage GetUsers()
		{
			Debug.WriteLine("Incoming GET for api/people");
			return Request.CreateResponse(HttpStatusCode.OK, Storage.GetAllUsers());
	    }

		[Route("api/people/{id}")]
		[HttpPut]
		public HttpResponseMessage UpdateUser(User user)
		{
			Debug.WriteLine("Incoming PUT for api/people/id");

			Storage.UpdateUser(user);

			/*var currentPerson = Storage.FindPersonByID(id);
			if (currentPerson == null)
			{
				return Request.CreateResponse(HttpStatusCode.NotFound);
			}

			if (person.Email != null)
			{
				currentPerson.Email = person.Email;
			}

			if (person.Bio != null)
			{
				currentPerson.Bio = person.Bio;
			}

			if (person.Likes != null)
			{
				currentPerson.Likes = person.Likes;
			}*/

			return Request.CreateResponse(HttpStatusCode.OK);
		}

		[Route("api/people/{id}")]
		[HttpDelete]
		public HttpResponseMessage DeleteUser(long id)
		{
			Debug.WriteLine("Incoming DELETE for api/people/id");
			Storage.DeleteUserByID(id);
			return Request.CreateResponse(HttpStatusCode.OK);
		}
    }
}
